module top_module(
    input clk,
    input in,
    input areset,
    output out); //
    
    reg state,next_state;
    parameter A=0,B=1,C=2,D=3;

    always @(posedge clk,posedge areset) begin // State transition logic
        if(areset)
            state <= A;
        else
            state <= next_state;
      end

    always @(posedge clk,posedge areset)begin// State flip-flops with asynchronous reset
        case (state)
            A: if(in==0)
                  next_state<=A;
                else
                  next_state<=B;
            B: if(in==0)
                  next_state<=C;
                else
                  next_state<=B; 
            C: if(in==0)
                  next_state<=A;
                else
                  next_state<=D;
            D: if(in==0)
                  next_state<=C;
                else
                  next_state<=B;
           endcase
		end
       
    always @(posedge clk or negedge areset ) begin    // Output logic
     case(state)
			A:out=0;
            B:out=0;
            C:out=0;
            D:out=1;            
        endcase
    end
endmodule
